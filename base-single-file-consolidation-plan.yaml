# HOLY LABEL BASE ソースファイル統合リファクタリング計画
# 開発効率向上とファイル管理の劇的簡素化
version: "2.0.0"
project: "holy-label-js-divede"
purpose: "ソースファイル自体を統合してファイル管理を劇的に簡素化し、開発効率を向上"

# =============================================================================
# 現状分析（ソースファイルレベル）
# =============================================================================
current_source_structure:
  css:
    source_files: 13
    maintenance_complexity: "高（13ファイル個別管理）"
    total_source_size: "88.7KB"
    files:
      - "foundation.css (1.6KB) - CSS変数・リセット"
      - "layout.css (6.0KB) - レイアウト・ナビ"
      - "base-menu.css (4.3KB) - BASEメニュー"
      - "product-components.css (4.7KB) - 商品コンポーネント"
      - "animations.css (2.6KB) - アニメーション"
      - "product-detail.css (12.6KB) - 商品詳細"
      - "forms.css (4.3KB) - フォーム"
      - "responsive.css (9.4KB) - レスポンシブ"
      - "footer-pages.css (6.0KB) - フッター・ページ"
      - "special-pages.css (10.4KB) - 特殊ページ"
      - "ui-components.css (9.4KB) - UIコンポーネント"
      - "base-integration.css (10.4KB) - BASE統合"
      - "remaining-styles.css (6.9KB) - 残存スタイル"

  javascript:
    source_files: 12
    maintenance_complexity: "高（12ファイル個別管理）"
    total_source_size: "79.3KB"
    files:
      - "dom-utils.js (2.0KB) - DOM操作基盤"
      - "page-state.js (3.0KB) - ページ状態管理"
      - "animation-config.js (2.9KB) - アニメーション設定"
      - "animation-manager.js (5.9KB) - アニメーション管理"
      - "navigation-manager.js (6.8KB) - ナビゲーション管理"
      - "modal-utils.js (7.7KB) - モーダル機能"
      - "product-gallery.js (12.8KB) - 商品ギャラリー"
      - "loadmore-manager.js (9.8KB) - Ajax読み込み"
      - "logo-manager.js (7.1KB) - ロゴ管理"
      - "initialization-manager.js (7.0KB) - 初期化管理"
      - "language-manager.js (6.2KB) - 多言語管理"
      - "scroll-manager.js (8.0KB) - スクロール管理"

# =============================================================================
# 統合目標（ソースファイルレベル）
# =============================================================================
consolidation_target:
  css:
    source_output: "holy-label-all.css"
    source_files: 1 # 13 → 1
    maintenance_reduction: "92.3%"
    
  javascript:
    source_output: "holy-label-all.js"
    source_files: 1 # 12 → 1
    maintenance_reduction: "91.7%"

# =============================================================================
# CSSソースファイル統合計画
# =============================================================================
css_source_consolidation:
  strategy: "source_file_merge_with_legacy_backup"
  
  consolidation_process:
    step_1_backup:
      action: "既存ソースファイルのバックアップ"
      destination: "css/src/legacy/"
      files_to_backup: "全13ファイル"
      
    step_2_merge:
      action: "依存関係順でのソースファイル統合"
      target_file: "css/src/holy-label-all.css"
      merge_order:
        foundation_layer:
          - "foundation.css # CSS変数・リセット・基盤"
          - "layout.css # レイアウト・ナビゲーション"
        components_layer:
          - "base-menu.css # BASEメニュー統合"
          - "product-components.css # 商品コンポーネント"
          - "animations.css # アニメーション定義"
        product_layer:
          - "product-detail.css # 商品詳細ページ"
          - "forms.css # フォーム要素"
          - "responsive.css # レスポンシブ対応"
          - "footer-pages.css # フッター・ページ"
        special_layer:
          - "special-pages.css # 特殊ページ（LOOKBOOK等）"
          - "ui-components.css # UIコンポーネント"
          - "base-integration.css # BASE統合機能"
          - "remaining-styles.css # HTMLから分離した残存"
          
    step_3_cleanup:
      action: "元ファイル削除"
      files_to_remove: "css/src/*.css（holy-label-all.css以外）"
      
  section_organization:
    use_css_comments: true
    section_separators:
      foundation: "/* ========== FOUNDATION LAYER ========== */"
      components: "/* ========== COMPONENTS LAYER ========== */"
      product: "/* ========== PRODUCT LAYER ========== */"
      special: "/* ========== SPECIAL FEATURES LAYER ========== */"
      
  build_simplification:
    new_input: "css/src/holy-label-all.css"
    new_output: "css/dist/holy-label-all.min.css"
    eliminated_builds: "13個別ビルド + 10バンドルビルド = 23ビルド削減"

# =============================================================================
# JavaScriptソースファイル統合計画
# =============================================================================
javascript_source_consolidation:
  strategy: "source_file_merge_with_dependency_order"
  
  consolidation_process:
    step_1_backup:
      action: "既存ソースファイルのバックアップ"
      destination: "js/src/legacy/"
      files_to_backup: "全12ファイル"
      
    step_2_merge:
      action: "依存関係順でのソースファイル統合"
      target_file: "js/src/holy-label-all.js"
      merge_order:
        core_layer:
          - "dom-utils.js # DOM操作基盤（HolyLabelDOMUtils）"
          - "page-state.js # ページ状態管理（HolyLabelPageState）"
          - "animation-config.js # アニメーション設定（HolyLabelAnimationConfig）"
        extended_layer:
          - "animation-manager.js # アニメーション管理（HolyLabelAnimationManager）"
          - "navigation-manager.js # ナビゲーション管理（HolyLabelNavigationManager）"
          - "modal-utils.js # モーダル機能（HolyLabelModalUtils）"
        advanced_layer:
          - "product-gallery.js # 商品ギャラリー（HolyLabelProductGallery）"
          - "loadmore-manager.js # Ajax読み込み（HolyLabelLoadMoreManager）"
          - "logo-manager.js # ロゴ管理（HolyLabelLogoManager）"
        final_layer:
          - "initialization-manager.js # 初期化管理（HolyLabelInitializationManager）"
          - "language-manager.js # 多言語管理（HolyLabelLanguageManager）"
          - "scroll-manager.js # スクロール管理（HolyLabelScrollManager）"
          
    step_3_cleanup:
      action: "元ファイル削除"
      files_to_remove: "js/src/*.js（holy-label-all.js以外）"
      
  section_organization:
    use_js_comments: true
    section_separators:
      core: "/* ========== CORE LAYER - 基盤機能 ========== */"
      extended: "/* ========== EXTENDED LAYER - 拡張機能 ========== */"
      advanced: "/* ========== ADVANCED LAYER - 高度機能 ========== */"
      final: "/* ========== FINAL LAYER - 最終統合 ========== */"
      
  global_namespace_preservation:
    critical_requirement: "全てのwindow.HolyLabel*変数の完全保持"
    preserved_variables:
      - "window.HolyLabelDOMUtils"
      - "window.HolyLabelPageState"
      - "window.HolyLabelAnimationConfig"
      - "window.HolyLabelAnimationManager"
      - "window.HolyLabelNavigationManager"
      - "window.HolyLabelModalUtils"
      - "window.HolyLabelProductGallery"
      - "window.HolyLabelLoadMoreManager"
      - "window.HolyLabelLogoManager"
      - "window.HolyLabelInitializationManager"
      - "window.HolyLabelLanguageManager"
      - "window.HolyLabelScrollManager"
      
  build_simplification:
    new_input: "js/src/holy-label-all.js"
    new_output: "js/dist/holy-label-all.min.js"
    eliminated_builds: "12個別ビルド + 4バンドルビルド = 16ビルド削減"

# =============================================================================
# ビルドシステム完全刷新計画
# =============================================================================
build_system_overhaul:
  css_build_script_simplification:
    file: "css/build.js"
    current_complexity: "複雑（13個別+10バンドル=23ビルド）"
    new_simplicity: "シンプル（1ソース→1出力）"
    changes:
      - "削除: 13個別ライブラリビルド機能"
      - "削除: 10バンドル作成機能"
      - "簡素化: 単一ファイル最適化に特化"
      - "保持: PostCSS・cssnano最適化プロセス"
    
  javascript_build_script_simplification:
    file: "js/build.js"
    current_complexity: "複雑（12個別+4バンドル=16ビルド）"
    new_simplicity: "シンプル（1ソース→1出力）"
    changes:
      - "削除: 12個別ライブラリビルド機能"
      - "削除: 4バンドル作成機能"
      - "簡素化: 単一ファイル最適化に特化"
      - "保持: Terser・グローバル変数保護"

  package_json_script_simplification:
    css_package_json:
      old_scripts:
        - "npm run build（複雑な多段ビルド）"
        - "npm run build:single"
        - "npm run build:all"
        - "npm run build:bundles"
      new_scripts:
        - "npm run build（シンプルな単一ビルド）"
        
    javascript_package_json:
      old_scripts:
        - "npm run build（複雑な多段ビルド）"
        - "npm run build:single"
        - "npm run build:all"
        - "npm run build:bundles"
      new_scripts:
        - "npm run build（シンプルな単一ビルド）"

  development_workflow_simplification:
    before:
      - "13個のCSSファイル個別編集"
      - "12個のJSファイル個別編集"
      - "複雑なビルドプロセス（39回のビルド）"
      - "複雑な依存関係管理"
    after:
      - "1個のCSSファイル編集"
      - "1個のJSファイル編集"
      - "シンプルなビルドプロセス（2回のビルド）"
      - "単純明快な構造"

# =============================================================================
# HTML統合最適化計画
# =============================================================================
html_integration_optimization:
  file: "holy-label-js-divede.html"
  
  current_external_dependencies:
    css_links: 1
    javascript_scripts: 1
    total_external_requests: 2
    loading_complexity: "低（2個の外部ファイル並行読み込み）"
    
  html_modifications_required:
    css_section_update:
      location: "行24-25付近（headセクション）"
      current_status: "既に統合ファイル対応済み"
      impact: "変更不要（最適化済み）"
      
    javascript_section_update:
      location: "行630-631付近（bodyセクション終了前）"
      current_status: "既に統合ファイル対応済み" 
      impact: "変更不要（最適化済み）"
      
    initialization_script_compatibility:
      location: "行635-684（初期化スクリプト）"
      current_status: "グローバル変数保持により完全互換"
      required_changes: "なし"

  performance_benefits:
    request_reduction: "既に最適化済み（2個）"
    parallel_loading: "CSS・JavaScript並行読み込み可能"
    cache_efficiency: "単一ファイルキャッシュによる効率向上"
    base_constraints_compliance: "150KB制限内（現在35.1KB使用）"
    
  backward_compatibility_assurance:
    html_structure: "完全保持（構造変更なし）"
    base_template_syntax: "完全保持（BASEテンプレート構文そのまま）"
    javascript_api: "完全保持（全グローバル変数・関数保持）"
    css_classes: "完全保持（全CSSクラス・スタイル保持）"

# =============================================================================
# ソースファイル統合実装フェーズ
# =============================================================================
source_consolidation_implementation_phases:
  phase_1_css_source_consolidation:
    duration: "2時間"
    tasks:
      - "css/src/legacy/ディレクトリ作成"
      - "既存13ファイルのlegacy/への移動"
      - "holy-label-all.cssの統合作成"
      - "セクション区切りコメント追加"
      
  phase_2_javascript_source_consolidation:
    duration: "2時間"
    tasks:
      - "js/src/legacy/ディレクトリ作成"
      - "既存12ファイルのlegacy/への移動"
      - "holy-label-all.jsの統合作成"
      - "グローバル変数保持確認"
      
  phase_3_build_system_simplification:
    duration: "1時間"
    tasks:
      - "css/build.js完全書き換え（シンプル化）"
      - "js/build.js完全書き換え（シンプル化）"
      - "package.jsonスクリプト簡素化"
      
  phase_4_html_optimization:
    duration: "30分"
    tasks:
      - "holy-label-js-divede.htmlの確認"
      - "CDN URL確認"
      - "コメント更新"
      
  phase_5_testing_and_verification:
    duration: "1時間"
    tasks:
      - "統合ソースファイルのビルド確認"
      - "出力ファイルサイズ確認"
      - "全機能動作確認"
      - "グローバル変数保持確認"

# =============================================================================
# BASE仕様準拠確認
# =============================================================================
base_compliance:
  editing_rules:
    source_editing: "js/src/ css/src/ のみ編集"
    dist_generation: "dist/フォルダは自動生成"
    backward_compatibility: "後方互換性完全維持"
    global_variables: "グローバル変数名変更なし"
    
  file_size_limits:
    html_limit: "HTMLファイル150KB制限内（現在34.8KB）"
    css_size: "統合CSS予想50KB（問題なし）"
    js_size: "統合JS予想30KB（問題なし）"
    cdn_limit: "jsDelivrCDN制限なし"
    
  deployment_process:
    git_deploy: "git push → jsDelivr自動反映"
    cdn_update: "5-10分でCDN更新"
    base_upload: "BASEでの単一ファイルアップロード可能"

# =============================================================================
# ソースファイル統合による期待効果
# =============================================================================
source_consolidation_expected_benefits:
  dramatic_development_simplification:
    source_file_management:
      - "CSS管理: 13ファイル → 1ファイル（92.3%削減）"
      - "JavaScript管理: 12ファイル → 1ファイル（91.7%削減）"
      - "総ソースファイル: 25ファイル → 2ファイル（92%削減）"
    
    build_process_simplification:
      - "CSSビルド: 23プロセス → 1プロセス（95.7%削減）"
      - "JavaScriptビルド: 16プロセス → 1プロセス（93.8%削減）"
      - "総ビルドプロセス: 39プロセス → 2プロセス（94.9%削減）"
    
    development_workflow_improvement:
      - "編集対象ファイルの劇的削減"
      - "依存関係管理の完全簡素化"
      - "メンテナンス工数の大幅削減"
      
  performance_and_deployment_benefits:
    http_request_optimization:
      - "外部リクエスト: 既に最適化済み（2個）"
      - "CSS読み込み: 既に最適化済み（1個）"
      - "JavaScript読み込み: 既に最適化済み（1個）"
    
    base_platform_optimization:
      - "BASEファイル管理の劇的簡素化"
      - "開発効率化"
      - "メンテナンス性向上"
      
  long_term_maintenance_advantages:
    code_management:
      - "単一ファイル編集による一元管理"
      - "コード検索・置換の効率化"
      - "バージョン管理の簡素化"
    
    debugging_and_troubleshooting:
      - "問題箇所特定の高速化"
      - "デバッグプロセスの簡素化"
      - "コードレビュー効率向上"
      
    scalability_and_extensibility:
      - "新機能追加の簡素化"
      - "リファクタリング作業の効率化"
      - "将来の拡張性向上"

# =============================================================================
# HTML更新詳細案（holy-label-js-divede.html）
# =============================================================================
html_file_modification_plan:
  file_path: "holy-label-js-divede.html"
  
  current_external_link_structure:
    css_section_lines: "24-25"
    current_css_links: "単一統合CSSファイル読み込み済み"
    css_url: "https://cdn.jsdelivr.net/gh/irutomo/holy-label-js-divede@main/css/dist/holy-label-all.min.css"
    
    javascript_section_lines: "630-631"
    current_javascript_links: "単一統合JavaScriptファイル読み込み済み"
    javascript_url: "https://cdn.jsdelivr.net/gh/irutomo/holy-label-js-divede@main/js/dist/holy-label-all.min.js"
      
  required_modifications:
    css_cdn_url_verification:
      action: "CDN URLの確認・最適化"
      current_url: "https://cdn.jsdelivr.net/gh/irutomo/holy-label-js-divede@main/css/dist/holy-label-all.min.css"
      status: "既に最適化済み（変更不要）"
      
    javascript_cdn_url_verification:
      action: "CDN URLの確認・最適化"
      current_url: "https://cdn.jsdelivr.net/gh/irutomo/holy-label-js-divede@main/js/dist/holy-label-all.min.js"
      status: "既に最適化済み（変更不要）"
      
    initialization_script_compatibility:
      location: "行635-684"
      status: "グローバル変数保持により完全互換"
      required_changes: "なし"
      verification_points:
        - "window.HolyLabelDOMUtils等の存在確認"
        - "HolyLabelInitializationManager.init()の動作確認"
        - "全機能の初期化確認"
        
  html_file_size_impact:
    current_size: "35.1KB（150KB制限の23.4%使用）"
    after_consolidation: "変更なし（外部リンクのみ変更）"
    base_compliance: "完全準拠（ファイルサイズ影響なし）"
    
  deployment_considerations:
    git_workflow: "通常のgit push → jsDelivr自動反映"
    cdn_cache_refresh: "5-10分でCDN更新"
    base_upload_requirement: "HTMLファイルのみ再アップロード"
    rollback_capability: "元のバンドル方式への瞬時切り戻し可能"

# =============================================================================
# リスク管理
# =============================================================================
risk_management:
  potential_risks:
    file_size_increase:
      risk: "ファイルサイズ増加"
      mitigation: "高圧縮率、不要コード削除"
      
    loading_performance:
      risk: "大きなファイルの初期ロード時間"
      mitigation: "gzip圧縮、CDN活用"
      
    debugging_complexity:
      risk: "統合ファイルでのデバッグ困難"
      mitigation: "ソースマップ生成、開発環境は分離維持"
      
  fallback_strategy:
    - "既存バンドル方式の並行維持"
    - "問題発生時の即座切り戻し可能"
    - "段階的移行による安全性確保" 